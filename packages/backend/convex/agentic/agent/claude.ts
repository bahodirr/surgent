import { BaseAgent, BaseAgentConfig, AgentCommandConfig } from "./base";
import { ModelConfig } from "./utils";
import { AgentType, ClaudeConfig, ClaudeResponse, ClaudeStreamCallbacks, Conversation } from "./types";

export class ClaudeAgent extends BaseAgent {
  private anthropicApiKey?: string;
  private model?: string;
  
  // Build the instruction once based on mode
  private buildInstruction(mode?: "ask" | "code"): string {
    if (mode === "ask") {
      return (
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository."
      );
    }
    return (
      "Do the necessary changes to the codebase based on the users input.\n" +
      "Don't ask any follow up questions."
    );
  }

  private escapePrompt(prompt: string): string {
    // Minimal escaping for safely embedding into a double-quoted echo
    return prompt
      .replace(/\\/g, "\\\\")
      .replace(/"/g, "\\\"")
      .replace(/\$/g, "\\$")
      .replace(/`/g, "\\`")
      .replace(/!/g, "\\!")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/\t/g, "\\t");
  }

  constructor(config: ClaudeConfig) {
    const baseConfig: BaseAgentConfig = {
      githubToken: config.githubToken,
      repoUrl: config.repoUrl,
      sandboxProvider: config.sandboxProvider,
      secrets: config.secrets,
      sandboxId: config.sandboxId,
      workingDirectory: config.workingDirectory,
    };

    super(baseConfig);

    // Validate that provider is anthropic if specified (Claude only supports anthropic)
    if (config.provider && config.provider !== "anthropic") {
      throw new Error("Claude agent only supports 'anthropic' provider");
    }

    // Store config values (API key only)
    this.anthropicApiKey = config.providerApiKey;
    this.model = config.model;

    // Single validation: ensure API key exists
    if (!this.anthropicApiKey) {
      throw new Error(
        "Claude agent requires providerApiKey (ANTHROPIC_API_KEY)."
      );
    }
  }

  protected getCommandConfig(
    prompt: string,
    mode?: "ask" | "code"
  ): AgentCommandConfig {
    const instruction = this.buildInstruction(mode);
    const escapedPrompt = this.escapePrompt(prompt);

    return {
      command: `echo "${escapedPrompt}" | claude -p --continue --append-system-prompt "${this.escapePrompt(instruction)}"${
        mode === "ask" ? ' --disallowedTools "Edit" "Replace" "Write"' : ""
      } --output-format stream-json --verbose --model ${
        this.model || "claude-sonnet-4-20250514"
      } --dangerously-skip-permissions`,

      //  TODO: Instead of --dangerously-skip-permissions, please use other config
      errorPrefix: "Claude",
      labelName: "claude",
      labelColor: "FF6B35",
      labelDescription: "Generated by Claude AI agent",
    };
  }

  protected getDefaultTemplate(): string {
    return "vibekit-claude";
  }

  protected getEnvironmentVariables(): Record<string, string> {
    return {
      ANTHROPIC_API_KEY: this.anthropicApiKey!,
    };
  }

  protected getApiKey(): string {
    return this.anthropicApiKey!;
  }

  protected getAgentType(): AgentType {
    return "claude";
  }

  protected getModelConfig(): ModelConfig {
    return {
      provider: "anthropic",
      apiKey: this.anthropicApiKey!,
      model: this.model,
    };
  }

  public async generateCode(
    prompt: string,
    mode?: "ask" | "code",
    branch?: string,
    callbacks?: ClaudeStreamCallbacks,
    background?: boolean
  ): Promise<ClaudeResponse> {
    const result = await super.generateCode(
      prompt,
      mode,
      branch,
      callbacks,
      background
    );
    return result as unknown as ClaudeResponse;
  }
}
